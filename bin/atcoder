#!/usr/bin/env python3

import requests
import sys
import os.path
import subprocess
import re
from bs4 import BeautifulSoup

def cmd_exe(cmd) -> (str, str, int):
    child = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = child.communicate()
    rt = child.returncode
    return stdout.decode(encoding='utf-8'), stderr.decode(encoding='utf-8'), rt

args = sys.argv
contest_name = args[1]
prob = args[2]
LOGIN_URL = "https://atcoder.jp/login"
task_screen_name = "{}_{}".format(contest_name, prob)
CPP_ID = 4003

source_path = args[3]
source_dir = os.path.dirname(source_path)

if os.path.exists(source_path):
    f = open(source_path)
    source_code = f.read()
    f.close()
else:
    print("File to submit is not found.")
    quit()

stdout, stderr, rt = cmd_exe("g++ -std=gnu++17 -I/home/kowerkoint/mylib/ac-library -O2 -o {}/a.out {}".format(source_dir, source_path))
if rt != 0:
    print("compile error:", file=sys.stderr)
    print(stderr, file=sys.stderr)
    sys.exit(1)

session = requests.session()
r = session.get(LOGIN_URL)
s = BeautifulSoup(r.text, 'lxml')
csrf_token = s.find(attrs={'name': 'csrf_token'}).get('value')

login_info = {
    "csrf_token": csrf_token,
    "username": "USERNAME",
    "password": "PASSWORD"
}

result = session.post(LOGIN_URL, data=login_info)
result.raise_for_status()
if result.status_code == 200:
    print("login completed")
else:
    print("login failed:{}".format(result.status_code), file=sys.stderr)
    sys.exit(1)

prob_url = "https://atcoder.jp/contests/{}/tasks/{}".format(contest_name, task_screen_name)
res = session.get(prob_url)
if res.status_code != 200:
    print("couldn't access the problem page:{}".format(res.status_code), file=sys.stderr)
    sys.exit(1)
text = res.text
text = text.replace("\r\n", "\n")
pattern = r"<hr />\n*<div class=\"part\">\n*<section>\n*<h3>Sample Input (\d+)</h3><pre>([\s\S]+?)</pre>\n*(?:<p>[\s\S]+?</p>\n*)?</section>\n*</div>\n*<div class=\"part\">\n*<section>\n*<h3>Sample Output \1</h3><pre>([\s\S]+?)</pre>\n*?(?:[\s\S]+?\n*)?</section>\n*</div>"
samples = re.findall(pattern, text)

acs = 0
for sample in samples:
    print("Sample {}".format(sample[0]))
    print("input:\n{}".format(sample[1]))
    print("expected output:\n{}".format(sample[2]))
    file = open("{}/in.txt".format(source_dir), 'w')
    file.write(sample[1])
    file.close()
    stdout, stderr, rt = cmd_exe("{}/a.out < {}/in.txt".format(source_dir, source_dir))
    if rt != 0:
        print("RE")
        print(stderr)
    print("program output:\n{}".format(stdout))
    if sample[2].split() == stdout.split():
        print("AC")
        acs += 1
    else:
        print("maybe WA")

print("AC:{}/{}".format(acs, len(samples)))
if_submit = acs == len(samples)
if not if_submit:
    ask = input('Do you want to submit??????[y/n]:')
    if ask == 'y' or ask == 'Y':
        if_submit = True
if not if_submit:
    sys.exit(0)

target_url = "https://atcoder.jp/contests/{}/submit".format(contest_name)

html = session.get(target_url)
html.raise_for_status()
soup = BeautifulSoup(html.text, 'lxml')

csrf_token = soup.find(attrs={'name': 'csrf_token'}).get('value')

submit_info = {
    "data.TaskScreenName": task_screen_name,
    "csrf_token": csrf_token,
    "data.LanguageId": CPP_ID,
    "sourceCode": source_code
}

result = session.post(target_url, data=submit_info)
result.raise_for_status()

if result.status_code == 200:
    print("Submitted")
    cmd_exe("xdg-open https://atcoder.jp/contests/{}/submissions/me".format(contest_name))
else:
    print("Error in submmiting:{}".format(result.status_code), file=sys.stderr)
    sys.exit(1)

