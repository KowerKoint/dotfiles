#!/usr/bin/env python3

from pytube import YouTube, Playlist
from apiclient.discovery import build
import os
import ffmpeg
import sys
import re
import random

def run(url, res, fps, abr, export, name, audio_only, fast, start, time):
    yt = YouTube(url)
    title = yt.title
    if name == '':
        name = title
    name = name.replace('/', '_').replace('\\', '_').replace(':', '_').replace('*', '_').replace('?', '_').replace('"', '_').replace('<', '_').replace('>', '_').replace('|', '_').replace(' ', '_');
    rint = random.randint(0, 99999999)
    aname = str(rint) + '_a'
    vname = str(rint) + '_v'

    audios = yt.streams.filter(abr=abr)
    if len(audios) == 0:
        print('条件に一致するオーディオが存在しませんでした')
        return
    #print(len(audios.order_by('abr').all()))
    #audio = audios.order_by('abr')[4]
    audio = audios.order_by('abr').last()
    if audio_only:
        if fast:
            audio.download(output_path=export, filename=name)
            return
        audio.download(filename=aname)
        ext = '.' + audio.subtype
        instream = ffmpeg.input(aname + ext)
        if export:
            if not os.path.exists(export):
                os.mkdir(export)
            if time == None:
                stream = ffmpeg.output(instream, export + '/' + name + '.mp3', ss=start)
                ffmpeg.run(stream)
            else:
                stream = ffmpeg.output(instream, export + '/' + name + '.mp3', ss=start, t=time)
                ffmpeg.run(stream)
        else:
            if time == None:
                stream = ffmpeg.output(instream, name + '.mp3', ss=start)
                ffmpeg.run(stream)
            else:
                stream = ffmpeg.output(instream, name + '.mp3', ss=start, t=time)
                ffmpeg.run(stream)
        os.remove(aname + ext)
        return
    audio.download(filename=aname)

    if fast:
        videos = yt.streams.filter(res=res, fps=fps, progressive=True)
        if len(videos) == 0:
            print('条件に一致するビデオが存在しませんでした')
            return
        videos.order_by('resolution').last().download(output_path=export, filename=name)
        return
    videos = yt.streams.filter(res=res, fps=fps)
    if len(videos) == 0:
        print('条件に一致するビデオが存在しませんでした')
        return
    video = videos.order_by('resolution').last()
    video.download(filename=vname)
    aext = '.' + audio.subtype
    vext = '.' + video.subtype
    instream1 = ffmpeg.input(vname + vext)
    instream2 = ffmpeg.input(aname + aext)
    if export:
        if not os.path.exists(export):
            os.mkdir(export)
        if time == None:
            stream = ffmpeg.output(instream1, instream2, export + '/' + name + '.mp4', vcodec='copy', acodec='aac', ss=start)
            ffmpeg.run(stream)
        else:
            stream = ffmpeg.output(instream1, instream2, export + '/' + name + '.mp4', vcodec='copy', acodec='aac', ss=start, t=time)
            ffmpeg.run(stream)
    else:
        if time == None:
            stream = ffmpeg.output(instream1, instream2, name + '.mp4', vcodec="copy", acodec="aac", ss=start)
            ffmpeg.run(stream)
        else:
            stream = ffmpeg.output(instream1, instream2, name + '.mp4', vcodec="copy", acodec="aac", ss=start, t=time)
            ffmpeg.run(stream)
    os.remove(aname + aext)
    os.remove(vname + vext)

args = sys.argv[1:]
res = None
fps = None
abr = None
export = None
name = ''
audio_only = False
fast = False
start = 0
time = None
x = 0
while x < len(args):
    if args[x] == '-res':
        if x + 1 < len(args) and re.fullmatch(r'[0-9]+p', args[x + 1]):
            res = args[x + 1]
            x += 1
        else:
            print('-resオプションの値が無効(ex."1080p")', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-fps':
        if x + 1 < len(args) and re.fullmatch(r'[0-9]+', args[x + 1]):
            fps = int(args[x + 1])
            x += 1
        else:
            print('-fpsオプションの値が無効(ex."30")', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-abr':
        if x + 1 < len(args) and re.fullmatch(r'[0-9]+kbps', args[x + 1]):
            abr = args[x + 1]
            x += 1
        else:
            print('-abrオプションの値が無効(ex."160kbps")', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-r':
        res = '1080p'
        fps = 20
        abr = '160kbps'
    elif args[x] == '-export':
        if x + 1 < len(args):
            export = args[x + 1]
            x += 1
        else:
            print('-exportオプションの値が見つかりません', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-name':
        if x + 1 < len(args):
            name = args[x + 1]
            x += 1
        else:
            print('-nameオプションの値が見つかりません', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-audio':
        audio_only = True
    elif args[x] == '-fast':
        fast = True
    elif args[x] == '-ss':
        if x + 1 < len(args) and re.fullmatch(r'[0-9]', args[x + 1]):
            start = int(args[x + 1])
            x += 1
        else:
            print('-ssオプションの値が無効(ex."2")', file=sys.stderr)
            sys.exit(1)
    elif args[x] == '-t':
        if x + 1 < len(args) and re.fullmatch(r'[0-9]', args[x + 1]):
            t = int(args[x + 1])
            x += 1
        else:
            print('-tオプションの値が無効(ex."2")', file=sys.stderr)
            sys.exit(1)

    else:
        print('無効なオプション：' + args[x], file=sys.stderr)
        sys.exit(1)
    x += 1

url = input('動画またはプレイリストのURL、または検索キーワード:')
if re.match(r'http*', url):
    if re.match(r'.*list.*', url):
        pl = Playlist(url)
        urls = pl.video_urls
        for u in urls:
            run(u, res, fps, abr, export, name, audio_only, fast, start, time)
    else:
        run(url, res, fps, abr, export, name, audio_only, fast, start, time)
else:
    response = build('youtube', 'v3', developerKey='AIzaSyA1CGE7IsIWTakQkN5jYZYjqRVbwjAxOo0').search().list(
        q=url,
        part='id,snippet',
        maxResults=10,
        type='video'
    ).execute()
    ids = []
    ind = 0
    for result in response.get('items', []):
        ind += 1
        print(ind, ':', result['snippet']['title'])
        ids.append(result['id']['videoId'])
    index = input('何番の動画が欲しい？:')
    while not(re.match(r'[0-9]+', index) and 1 <= int(index) <= 10):
        index = input('1から10までの半角数字で答えて！:')
    url = 'https://www.youtube.com/watch?v=' + ids[int(index) - 1]
    run(url, res, fps, abr, export, name, audio_only, fast, start, time)
