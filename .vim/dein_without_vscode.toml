#高速移動
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add='''
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
map f <Plug>(easymotion-fl)
map t <Plug>(easymotion-tl)
map F <Plug>(easymotion-Fl)
map T <Plug>(easymotion-Tl)
'''

#ステータスバーの見た目変更
[[plugins]]
repo = 'vim-airline/vim-airline'

#Ctrl+Eでresizeモードに入り、hjklでウィンドウの大きさを変える
[[plugins]]
repo = 'simeji/winresizer'

#Markdownのプレビュー
[[plugins]]
repo = 'previm/previm'

#ファイル検索ツール
#使いこなせたら強いんだろうなー…
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nmap <silent> ,f :<C-u>Denite file/rec<CR>
nmap <silent> ,g :<C-u>Denite grep<CR>
nmap <silent> ,b :<C-u>Denite buffer<CR>
nmap <silent> ,l :<C-u>Denite line<CR>
nmap <silent> ,m :<C-u>Denite file_mru<CR>
nmap <silent> ,y :<C-u>Denite neoyank<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
endfunction

" Ag command on grep source
call denite#custom#var('grep', {
      \ 'command': ['ag'],
      \ 'default_opts': ['-i', '--vimgrep'],
      \ 'recursive_opts': [],
      \ 'pattern_opt': [],
      \ 'separator': ['--'],
      \ 'final_opts': [],
      \ })
'''

#Denite関連
[[plugins]]
repo = 'Shougo/neomru.vim'

#Denite関連
[[plugins]]
repo = 'Shougo/neoyank.vim'

#スニペット
[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
let g:neosnippet#enable_complete_done=1
'''

#neosnippet用の汎用snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

#filetypeの自動判別
[[plugins]]
repo = 'Shougo/context_filetype.vim'

#Visual Basic用のシンタックスなど
[[plugins]]
repo = 'hachibeeDI/vim-vbnet'

#対応するカッコ同士で色分けする
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add='''
let g:rainbow_active = 1
'''

#いい感じのテーマ
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add='''
set background=dark
colorscheme hybrid
'''

#ファイラー
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add='''
"https://qiita.com/arks22/items/9688ec7f4cb43444e9d9
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
        \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction

function MyDefx() abort
  Defx
  wincmd l
endfunction

nnoremap <silent> <Leader>f :<C-u>Defx<CR>
call defx#custom#option('_', {
      \ 'winwidth': 25,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'columns': 'indent:icons:filename:mark'
      \ })
autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()
'''

#Nerd Fontでかっこいいアイコンを付ける
[[plugins]]
repo = 'ryanoasis/vim-devicons'

#defxにファイルタイプ別のアイコンを付ける
[[plugins]]
repo = 'kristijanhusak/defx-icons'

#関数等のタグ付け・ジャンプができるウィンドウ
[[plugins]]
repo = 'preservim/tagbar'
hook_add='''
  nnoremap <F8> :TagbarToggle<CR>
'''

#Gitの差分を表示
[[plugins]]
repo = "airblade/vim-gitgutter"

#Gitの操作をVim上でやる
[[plugins]]
repo = "tpope/vim-fugitive"
hook_add='''
nnoremap <leader>gs :tab sp<CR>:Gstatus<CR>:only<CR>
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gh :tab sp<CR>:0Glog<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gr :Grebase -i<CR>
nnoremap <leader>gg :Ggrep 
nnoremap <leader>gm :Gmerge 
'''

#LSP(言語ごとのリント、補完等ができるようになる)
#IDE化の要
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
        \ 'whitelist': ['rust'],
        \ })
endif
if executable('haskell-language-server-8.10.2')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'hie',
        \ 'cmd': {server_info->['haskell-language-server-8.10.2']},
        \ 'whitelist': ['haskell'],
        \ })
endif
if executable('html-languageserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'html-lang',
        \ 'cmd': {server_info->['html-languageserver --stdio']},
        \ 'whitelist': ['html'],
        \ })
endif
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

#:LspInstallServerで開いてる言語のLSPを自動インストールする
#C/C++のclangdとかRubyのsolargraphとかRustのrlsとかは自分で入れないといけないかも
[[plugins]]
repo = 'mattn/vim-lsp-settings'

#高速な非同期処理を定義
[[plugins]]
repo = 'prabirshrestha/async.vim'

#非同期処理の高速な補完ツール
#これがないと始まらない
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add='''
let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

let g:asyncomplete_remove_duplicates = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1
'''

#vim-lspをasyncompleteに反映
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

#Kotlinのシンタックスハイライト
[[plugins]]
repo = 'udalov/kotlin-vim'

#Rustの自動フォーマット
[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add='''
let g:rustfmt_autosave = 1
'''

