#dein自身も管理
[[plugins]]
repo = 'Shougo/dein.vim'

#置換結果をリアルタイム表示
[[plugins]]
repo = 'markonm/traces.vim'

#ds( ()を削除
#cs({ ()を{}に変更
#ysiw( 単語を()で囲む
#S( Visualモードの選択範囲を()で囲む
[[plugins]]
repo = 'tpope/vim-surround'

#vim-surroundをドットでリピートできるようにする
[[plugins]]
repo = 'tpope/vim-repeat'

#text objectを自己定義
[[plugins]]
repo = 'kana/vim-textobj-user'

#ie or aeで全体
[[plugins]]
repo = 'kana/vim-textobj-entire'

#ilで前後の空白含まない1行
#alで前後の空白含む1行
#改行文字を含めないことで差別化
[[plugins]]
repo = 'kana/vim-textobj-line'

#iFで関数の中身
#aFで関数全体
#init.vimで再定義中
[[plugins]]
repo = 'kana/vim-textobj-function'
hook_add='''
omap iF <Plug>(textobj-function-i)
omap aF <Plug>(textobj-function-a)
vmap iF <Plug>(textobj-function-i)
vmap aF <Plug>(textobj-function-a)
'''

#iu or auでURL
[[plugins]]
repo = 'mattn/vim-textobj-url'

#任意の一文字の間
#if~で~~の中身など
#af~で~~を含めた全体など
[[plugins]]
repo = 'thinca/vim-textobj-between'

#icでコメント内部
#acでコメント全体
[[plugins]]
repo = 'thinca/vim-textobj-comment'

#i-で--の中身
#a-で--を含めた全体
[[plugins]]
repo = 'RyanMcG/vim-textobj-dash'

#irrでRubyのブロック内部
#arrでRubyのブロック全体
[[plutins]]
repo = 'rhysd/vim-textobj-ruby'

#i,wでキャメルケース、スネークケース等の単語内単語
[[plugins]]
repo = 'h1mesuke/textobj-wiw'

#ix[でarr[i]のi
#ax[でarr[i]全体
[[plugins]]
repo = 'anyakichi/vim-textobj-xbrackets'

#i.で引数1つ
#a.で引数1つと次の区切り文字
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
hook_add = '''
let g:vim_textobj_parameter_mapping = '.'
'''

#operatorを追加定義
[[plugins]]
repo = 'kana/vim-operator-user'

#Rでレジスタの中身と入れ替え
[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add='''
nmap R <Plug>(operator-replace)
nmap R <Plug>(operator-replace)
'''

#URLをブラウザで開くなど previmとの連携もある
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add='''
let g:netrw_nogx = 1
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

#ヘルプの日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

#コメントトグラー
[[plugins]]
repo = 'tpope/vim-commentary'

#以下、vscodeでは意味がないプラグイン

#ステータスバーの見た目変更
[[plugins]]
repo = 'vim-airline/vim-airline'
if = '!exists("g:vscode")'

#Ctrl+Eでresizeモードに入り、hjklでウィンドウの大きさを変える
[[plugins]]
repo = 'simeji/winresizer'
if = '!exists("g:vscode")'

#Markdownのプレビュー
[[plugins]]
repo = 'previm/previm'
if = '!exists("g:vscode")'

#ファイル検索ツール
#使いこなせたら強いんだろうなー…
[[plugins]]
repo = 'Shougo/denite.nvim'
if = '!exists("g:vscode")'
hook_source = '''
nmap <silent> ,f :<C-u>Denite file/rec<CR>
nmap <silent> ,g :<C-u>Denite grep<CR>
nmap <silent> ,b :<C-u>Denite buffer<CR>
nmap <silent> ,l :<C-u>Denite line<CR>
nmap <silent> ,m :<C-u>Denite file_mru<CR>
nmap <silent> ,y :<C-u>Denite neoyank<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
endfunction

" Ag command on grep source
call denite#custom#var('grep', {
      \ 'command': ['ag'],
      \ 'default_opts': ['-i', '--vimgrep'],
      \ 'recursive_opts': [],
      \ 'pattern_opt': [],
      \ 'separator': ['--'],
      \ 'final_opts': [],
      \ })
'''

#Denite関連
[[plugins]]
repo = 'Shougo/neomru.vim'
if = '!exists("g:vscode")'

#Denite関連
[[plugins]]
repo = 'Shougo/neoyank.vim'
if = '!exists("g:vscode")'

#スニペット
[[plugins]]
repo = 'Shougo/neosnippet'
if = '!exists("g:vscode")'
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
let g:neosnippet#enable_complete_done=1
'''

#neosnippet用の汎用snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = '!exists("g:vscode")'

#filetypeの自動判別
[[plugins]]
repo = 'Shougo/context_filetype.vim'
if = '!exists("g:vscode")'

#Visual Basic用のシンタックスなど
[[plugins]]
repo = 'hachibeeDI/vim-vbnet'
if = '!exists("g:vscode")'

#対応するカッコ同士で色分けする
[[plugins]]
repo = 'luochen1990/rainbow'
if = '!exists("g:vscode")'
hook_add='''
let g:rainbow_active = 1
'''

#いい感じのテーマ
[[plugins]]
repo = 'w0ng/vim-hybrid'
if = '!exists("g:vscode")'
hook_source='''
set background=dark
colorscheme hybrid
'''

#ファイラー
[[plugins]]
repo = 'Shougo/defx.nvim'
if = '!exists("g:vscode")'
hook_source='''
"https://qiita.com/arks22/items/9688ec7f4cb43444e9d9
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
        \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction

function MyDefx() abort
  Defx
  wincmd l
endfunction

nnoremap <silent> <Leader>f :<C-u>Defx<CR>
call defx#custom#option('_', {
      \ 'winwidth': 25,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'columns': 'indent:icons:filename:mark'
      \ })
autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()
'''

#Nerd Fontでかっこいいアイコンを付ける
[[plugins]]
repo = 'ryanoasis/vim-devicons'
if = '!exists("g:vscode")'

#defxにファイルタイプ別のアイコンを付ける
[[plugins]]
repo = 'kristijanhusak/defx-icons'
if = '!exists("g:vscode")'

#関数等のタグ付け・ジャンプができるウィンドウ
[[plugins]]
repo = 'preservim/tagbar'
if = '!exists("g:vscode")'
hook_add='''
  nnoremap <F8> :TagbarToggle<CR>
'''

#Gitの差分を表示
[[plugins]]
repo = "airblade/vim-gitgutter"
if = '!exists("g:vscode")'

#Gitの操作をVim上でやる
[[plugins]]
repo = "tpope/vim-fugitive"
if = '!exists("g:vscode")'
hook_add='''
nnoremap <leader>gs :tab sp<CR>:Gstatus<CR>:only<CR>
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gh :tab sp<CR>:0Glog<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gr :Grebase -i<CR>
nnoremap <leader>gg :Ggrep 
nnoremap <leader>gm :Gmerge 
'''

#LSP
[[plugins]]
repo = "neoclide/coc.nvim"
merge = 0
rev = "release"
build = "coc#util#install()'
if = '!exists("g:vscode")'
hook_add='''
" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
'''

# ターミナル
[[plugins]]
repo = 'Shougo/deol.nvim'
if = '!exists("g:vscode")'

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install -all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
