#置換結果をリアルタイム表示
[[plugins]]
repo = 'markonm/traces.vim'

#ステータスバーの見た目変更
[[plugins]]
repo = 'vim-airline/vim-airline'

#ds( ()を削除
#cs({ ()を{}に変更
#ysiw( 単語を()で囲む
#S( Visualモードの選択範囲を()で囲む
[[plugins]]
repo = 'tpope/vim-surround'

#vim-surroundをドットでリピートできるようにする
[[plugins]]
repo = 'tpope/vim-repeat'

#text objectを自己定義
[[plugins]]
repo = 'kana/vim-textobj-user'

#ie or aeで全体
[[plugins]]
repo = 'kana/vim-textobj-entire'

#ilで前後の空白含まない1行
#alで前後の空白含む1行
#改行文字を含めないことで差別化
[[plugins]]
repo = 'kana/vim-textobj-line'

#iFで関数の中身
#aFで関数全体
#init.vimで再定義中
[[plugins]]
repo = 'kana/vim-textobj-function'

#iz or azで折りたたみ

#iu or auでURL
[[plugins]]
repo = 'mattn/vim-textobj-url'

#if~で~~の中身など
#af~で~~を含めた全体など
[[plugins]]
repo = 'thinca/vim-textobj-between'

#icでコメント内部
#acでコメント全体
[[plugins]]
repo = 'thinca/vim-textobj-comment'

#i-で--の中身
#a-で--を含めた全体
[[plugins]]
repo = 'RyanMcG/vim-textobj-dash'

#irrでRubyのブロック内部
#arrでRubyのブロック全体
[[plutins]]
repo = 'rhysd/vim-textobj-ruby'

#i,wで単語内単語
[[plugins]]
repo = 'h1mesuke/textobj-wiw'

#ix[でarr[i]のi
#ax[でarr[i]全体
[[plugins]]
repo = 'anyakichi/vim-textobj-xbrackets'

#i.で引数1つ
#a.で引数1つと次の区切り文字
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
hook_add = '''
let g:vim_textobj_parameter_mapping = '.'
'''


[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'

[[plugins]]
repo = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'previm/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add='''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'c':['clangd'],
      \ 'cpp':['clangd'],
      \ 'python':['pyls'],
      \ 'ruby':['solargraph', 'stdio'],
      \ 'java':['java',
      \   '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044',
      \   '-Declipse.application=org.eclipse.jdt.ls.core.id1',
      \   '-Dosgi.bundles.defaultStartLevel=4',
      \   '-Declipse.product=org.eclipse.jdt.ls.core.product',
      \   '-Dlog.protocol=true',
      \   '-Dlog.level=ALL',
      \   '-noverify',
      \   '-Xmx1G',
      \   '-jar', '/home/kowerkoint/mylib/org.eclipse.equinox.launcher.jar',
      \   '-configuration', '/home/kowerkoint/mylib/jdt-language-server/config_linux',
      \   '-data', getcwd()],
      \ 'html':['html-languageserver', '--stdio'],
      \ 'css':['css-languageserver', '--stdio'],
      \ 'json':['json-languageserver', '--stdio'],
      \ 'javascript':['javascript-typescript-stdio'],
      \ 'typescript':['javascript-typescript-stdio'],
      \ 'tex':['texlab'],
      \ 'sh':['bash-language-server', 'start'],
      \ 'rust': ['rustup', 'run', 'stable', 'rls']
      \ }

let g:LanguageClient_autoStart = 1
let g:LanguageClient#enable_at_startup = 1
let g:LanguageClient_loadSettings = 1

nnoremap <leader>K :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
'''
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1

"Tab補完の設定
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~ '\s'
endfunction

"Shift+Tabで前の補完候補へ
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nmap <silent> ,f :<C-u>Denite file/rec<CR>
nmap <silent> ,g :<C-u>Denite grep<CR>
nmap <silent> ,b :<C-u>Denite buffer<CR>
nmap <silent> ,l :<C-u>Denite line<CR>
nmap <silent> ,m :<C-u>Denite file_mru<CR>
nmap <silent> ,y :<C-u>Denite neoyank<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  inoremap <silent><buffer><expr> <BS> denite#do_map('move_up_path')
  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
endfunction

" Ag command on grep source
call denite#custom#var('grep', {
      \ 'command': ['ag'],
      \ 'default_opts': ['-i', '--vimgrep'],
      \ 'recursive_opts': [],
      \ 'pattern_opt': [],
      \ 'separator': ['--'],
      \ 'final_opts': [],
      \ })
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
let g:neosnippet#enable_complete_done=1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
map f <Plug>(easymotion-fl)
map t <Plug>(easymotion-tl)
map F <Plug>(easymotion-Fl)
map T <Plug>(easymotion-Tl)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'hachibeeDI/vim-vbnet'

[[plugins]]
repo = 'ghifarit53/tokyonight-vim'
hook_add='''
let g:tokyonight_enable_italic = 1
"colorscheme tokyonight
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add='''
let g:rainbow_active = 1
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add='''
set background=dark
colorscheme hybrid
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add='''
"https://qiita.com/arks22/items/9688ec7f4cb43444e9d9
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
        \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
        \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
        \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns',
        \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
        \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
endfunction

function MyDefx() abort
  Defx
  wincmd l
endfunction

autocmd VimEnter * call MyDefx()
nnoremap <silent> <Leader>f :<C-u>Defx<CR>
call defx#custom#option('_', {
      \ 'winwidth': 25,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'columns': 'indent:icons:filename:mark'
      \ })
autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'preservim/tagbar'
hook_add='''
  nnoremap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"
hook_add='''
nnoremap <leader>gs :tab sp<CR>:Gstatus<CR>:only<CR>
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gh :tab sp<CR>:0Glog<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gr :Grebase -i<CR>
nnoremap <leader>gg :Ggrep 
nnoremap <leader>gm :Gmerge 
'''
